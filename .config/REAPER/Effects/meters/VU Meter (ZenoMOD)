//****************************************************************************************************
   
   JSFX Name: VU Meter (ZenoMOD)
   Author:  chris-s, Zeno
   REAPER: 6.45
   Version: 1.5.0
   Tags: analysis analyzer vu meter loudness
   Disclaimer: Use of this software is on your own risk!
   
   
   About:  
  Simple VU Meter - a fine freeware by chris-s, modified and functionally extended by Zeno.
  
  Some hidden sliders can be used for parameter modulation !! ;)
  

   
   
   Changelog:
   v1.0:
    * Initial release by chris-s
   v1.1:
    * fully resizable and has a circular design now
   
   ********** MODIFICATIONS **********
   
   v1.2.0:
    * Some minor modifications
   v1.2.1:
    * Add volume slider for gain adjustments (+-18dB)
   v1.3.0:
    * Add hidden sliders for peak LEDs left/mid and right/side
   v1.3.1:
    * Add hidden sliders for vu meter readout left/mid and right/side
   v1.3.2:
    * Add new UI Style: Modern
   v1.3.3:
    * Adjust notch & value positions
   v1.3.4:
    * Add new UI Style: Purple
    * Add new UI Style: Ugly Child
   v1.4.0:
    * Add new UI Style: BLVCK
   v1.4.1:
    * Add simplified embedded UI in MCP & TCP
    * Some minor graphic optimizations
   v1.5.0:
    * Add Refresh Rate Override: "options:gfx_hz=60"
    * Add UI Slider Mask
    * Some code clean up
   v1.6.0:
    * UI Style overhaul for all styles except "Classic"
    * Add new bottom bar with UI Slider Mask button
    * Add version number to bottom bar
    * Proper embedded UI scaling
    * Embedded UI always shows mono sum (regardless of mode setting)
    * Some more code clean up
   v1.6.5:
    * Add new UI Style: Warm
    * Add new UI Style: Ivory
    * Add new UI Style: Trooper
   

//*************************************** END INFO **************************************************/




/***************************************** DESC *****************************************************/

desc:VU Meter (ZenoMOD)
//tags: analysis analyzer vu meter loudness
//author: chris-s , Zeno




// Sliders                                                                                // Name

slider1: 1<7,6,5,4,3,2,1,0{Classic,Dark Knight,Purple,Mint,Pastel,Warm,Ivory,Trooper}>    -UI Style
slider2: 0<0,2,1{Stereo,Mono/Sum,Mid/Side}>                                               Mode
slider3: -18<-36,0,0.5>                                                                   -Ref Level
slider4: -6<-20,0,0.1>                                                                    -Warn Level
slider5: 50<0,100>                                                                        -Response
slider6: 0.0053<0,.01,0.0001>                                                             -Damping
slider7: 0<-18,18,0.1>                                                                    Volume (dB)

slider11: 30<10,100,1>                                                                    -Peak Hold


// Parameter Modulation sliders...

slider50: -20<-20,0,3>                                                                    -VU Left/Mid
slider51: -20<-20,0,3>                                                                    -VU Right/Side
slider52: 0<0,1,1>                                                                        -Peak LED L
slider53: 0<0,1,1>                                                                        -Peak LED R


// Bottom Bar settings...

slider60: 0.50<0,1,0.01>                                                                  -Transparency




// Hide side meters / Set refresh rate

options: no_meter
options: gfx_hz=60


in_pin: left input
in_pin: right input
out_pin: left output
out_pin: right output












@init

//===================================== VERSION NUMBER ==============================================/
  version = ("v1.6.5");




//========================================= VOLUME ==================================================/
  AMP_dB_i = 1/8.68588963806504;
  db = slider7; // initialize here but not in @slider for playback start




//========================================= VU METER ================================================/

  // bg col
  gfx_clear = 30 + 60 * 256 + 110 * 65536;
  gfx_ext_retina = 1;


  errcnt = 0;
  tot_nbr_spl = 0;
  scnt = 0;
  fact_up = 0;
  offset = 0.0074;
  nd_posL = nd_posR = 0;
  nd_speedL = nd_speedR = 0;
  dt = 10 / srate;
  mom = 0.00042;
  damp = 1 - 0.0053 * (48000 / srate);
  dbL = dbR = 0;
  overL = overR = 0;


  print = 10;
  print[0] = -20;
  print[1] = -10;
  print[2] = -7;
  print[3] = -5;
  print[4] = -3;
  print[5] = -2;
  print[6] = -1;
  print[7] = 0;
  print[8] = 1;
  print[9] = 2;
  print[10] = 3;


  pos = 30;
  pos[0] = 0;
  pos[1] = .1650;
  pos[2] = .2641;
  pos[3] = .3519;
  pos[4] = .4626;
  pos[5] = .5284;
  pos[6] = .6022;
  pos[7] = .6849;
  pos[8] = .7779;
  pos[9] = .8822;
  pos[10] = 1;




//======================================= SLIDER MASK ===============================================/
  TEXT_COLOR = $xffffff;

  UI_SLIDER_MASK = (1<<7)-1;
  sliders_showing = 0;












@slider

//======================================== VOLUME ===================================================/
  ddb=0.0;


//======================================== VU METER =================================================/
  fact_up = 10 ^ (( -slider3 - 10)/20) * 0.3785 ;
  wl   = slider4;
  mode = slider2;
  lim = 10 ^ (wl / 20);
  mom = 0.00010 + 0.00032 *  slider5^3 / 125000;   
  damp = 1 - slider6 * (48000 / srate);


//======================================== SETTINGS =================================================/
  bb_t = slider60;












@block

//========================================= VOLUME ==================================================/
  cnt=0;
  ddb=0.0;

  db_chg_splpos=slider_next_chg(1, tgtdb);
  db_chg_splpos > 0 ? (db=slider7;) : (tgtdb = slider7; db_chg_splpos = samplesblock;);

  ddb=(tgtdb-db)/db_chg_splpos;












@sample

//========================================= VOLUME ==================================================/
  
  cnt == db_chg_splpos ? (ddb=0.0; db_chg_splpos=slider_next_chg(1, tgtdb); 
     db_chg_splpos > cnt ? (ddb=(tgtdb-db)/(db_chg_splpos-cnt);););

  adj=exp(db*AMP_DB_i);

  spl0 *= adj;
  spl1 *= adj;

  db += ddb;
  cnt += 1;




//======================================== VU METER =================================================/
 
  tot_nbr_spl += 1;

  smpL = spl0; 
  smpR = spl1;

  mode == 1 ? (smpL = (spl0 + spl1) * 0.5; smpR = smpL;);
  mode >= 2 ? (smpL = (spl0 + spl1) * 0.5; smpR = (spl0 - spl1) * 0.5;);

  smpL = abs(smpL);
  smpR = abs(smpR);

  scnt += 1;
  scnt === 10 ? (


//************************************* move left needle *********************************************
  
  force = smpL * fact_up  -  (nd_posL * .1 + offset);
    
  nd_speedL += force * dt / mom;  
  nd_speedL = nd_speedL * damp;
  nd_posL += nd_speedL * dt;
  nd_posL < 0 || nd_posL > 1 ? nd_speedL = 0;

  nd_posL = min(max(nd_posL,0),1);

  
//************************************* move right needle ********************************************

  force = smpR * fact_up  - (nd_posR * .1 + offset);

  nd_speedR += force * dt / mom;  
  nd_speedR = nd_speedR * damp;
  nd_posR += nd_speedR * dt;
  nd_posR < 0 || nd_posR > 1 ? nd_speedR = 0;

  nd_posR = min(max(nd_posR,0),1);

  overL -= slider11;
  overR -= slider11;

  scnt = 0;  
  ); //scnt


//*****************************************************************************************************

  smpL > lim ? overL = srate;
  smpR > lim ? overR = srate;

  tot_nbr_spl_g  = tot_nbr_spl;

  overL_g = overL;
  overR_g = overR;
  nd_posL_g = nd_posL;
  nd_posR_g = nd_posR;

  tot_nbr_spl_g === tot_nbr_spl ? (
  dbL = (nd_posL_g * 23) - 20;
  dbR = (nd_posR_g * 23) - 20;
  ) : (
  errcnt += 1; // thread collision
  );


  slider50 = dbL;   
  slider51 = dbR;   
  slider52 = overL_g;
  slider53 = overR_g;












@gfx 480 253


  // override drawing functions for graphical window scaling
  gsc = min(gfx_w/480,gfx_h/253); igsc = 1.5/gsc;
  gxo = max(0,  gfx_w/2 - gfx_h*480/253/2);


  function gfx_lineto(x,y,aa) ( gfx_x*=gsc; gfx_y*=gsc; gfx_x+=gxo; 
       gfx_lineto(x*gsc+gxo,y*gsc,aa); gfx_x-=gxo; gfx_x*=igsc; gfx_y*=igsc; );

  function gfx_rectto(x,y)(gfx_x*=gsc; gfx_y*=gsc; gfx_x+=gxo; gsc>.5 ? 
       gfx_rectto(x*gsc+gxo,y*gsc); gfx_x-=gxo;  gfx_x*=igsc; gfx_y*=igsc; );

  function gfx_drawnumber(y,x) (
       gsc>.5 ? (
          gsc<.7 && x>1 ? x=1;
          gfx_x*=gsc; gfx_y*=gsc; gfx_x+=gxo; gfx_drawnumber(y,x); 
          gfx_x-=gxo;  gfx_x*=igsc; gfx_y*=igsc; 
       );
  );


  function gfx_drawchar(x) (gsc>.5 ? gfx_drawchar(x););
  function gfx_drawstr(x) (gsc>.5 ? gfx_drawstr(x););
  function gfx_printf(x,y) ( gsc>.5 ? gfx_printf(x,y); );
  function gfx_arc(x, y, r, a1, a2, aa) (gsc>.5 ? 
     gfx_arc(x, y, r, a1, a2, aa) : gfx_arc(x, y, r, a1, a2, 0);
     );


  // font init
  fontinit != 1 ? (
  gfx_setfont(1, "Arial", 14, '');
  gfx_setfont(2, "Arial", 20, 'b');
  gfx_setfont(3, "Arial", 16, '');
  fontinit = 1;
  );




//========================================== STYLES =================================================/

  style = slider1;

  style == 0 ? ( gfx_clear = 30 + 60 * 256 + 110 * 65536; );
  style == 1 ? ( gfx_clear = 18 + 18 * 256 + 18 * 65536; );
  style == 2 ? ( gfx_clear = 16 + 10 * 256 + 26 * 65536; );
  style == 3 ? ( gfx_clear = 52 + 89 * 256 + 86 * 65536; );
  style == 4 ? ( gfx_clear = 245 + 169 * 256 + 171 * 65536; );
  style == 5 ? ( gfx_clear = 26 + 25 * 256 + 21 * 65536; );
  style == 6 ? ( gfx_clear = 204 + 199 * 256 + 180 * 65536; );
  style == 7 ? ( gfx_clear = 163 + 162 * 256 + 158 * 65536; );




  w1 = $pi * 16.5 / 180; 
  w2 = $pi * 45 / 180;
  xw = max(1,floor((gfx_w-30) / 2));
  yw = floor(xw / 1.5);
  r1 = floor(yw * 0.85);

  chan = 0;

  while (chan <= 1) (
      xd = 10 + chan*(xw+10);
      mode === 1 ? xd += floor(xw/2);
      yd = 10;
      xa = floor(xd + xw / 2);
      ya = floor(yd + yw * 1.1);


    //************************************* meter background styles **************************************   
    
      // background style 4: pastel ( color diff ) 
      gfx_r=0;gfx_g=1;gfx_b=.9;  gfx_rect(xd,yd,xw,yw);
      
      
      // background style 0: classic
      style == 0 ? ( gfx_r=1; gfx_g=1; gfx_b=0.7;  gfx_rect(xd,yd,xw,yw);  );
      
      // background style 1: dark knight
      style == 1 ? ( gfx_r=gfx_g=0.18431 ;gfx_b = 0.2;  gfx_rect(xd,yd,xw,yw);  );
    
      // background style 2: purple
      style == 2 ? ( gfx_r=0.14110; gfx_g=0.09020; gfx_b=0.21961;  gfx_rect(xd,yd,xw,yw);  );
      
      // background style 3: mint
      style == 3 ? ( gfx_r=0.65490; gfx_g=0.94902; gfx_b=0.92157;  gfx_rect(xd,yd,xw,yw);  );
    
      // background style 4: pastel
      style == 4 ? ( gfx_r=0.65; gfx_g=0.37; gfx_b=0.6;  gfx_rect(xd,yd+yw;,xw-(xw/1.35),yw*yw );
                     gfx_r=0.85490; gfx_g=0.85490; gfx_b=0.96078;  gfx_rect(xd,yd,xw,yw); gfx_a=0.79; );

      // background style 5: warm
      style == 5 ? ( gfx_r=1; gfx_g=0.76471; gfx_b=0.32549; gfx_a=1;  gfx_rect(xd,yd,xw,yw);
                     gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.10; gfx_rect(xd,yd,xw,yw/yd*1.6);
                     gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.13; gfx_rect(xd,yd,xw,yw/yd*1.5);
                     gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.15; gfx_rect(xd,yd,xw,yw/yd*1.4);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.1; gfx_rect(xd,ya*.76,xw,yw/yd*1.7);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.10; gfx_circle(xa,ya*1.15,r1*0.87,1,1);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.13; gfx_circle(xa,ya*1.20,r1*0.87,1,1);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.15; gfx_circle(xa,ya*1.25,r1*0.87,1,1);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.18; gfx_circle(xa,ya*1.30,r1*0.87,1,1);
                     gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.25; gfx_circle(xa,ya*1.27,r1*0.77,1,1);
                     gfx_r=0.10196; gfx_g=0.09804; gfx_b=0.08235; gfx_a=1;  gfx_rect(xd,ya*0.91,xw,yw*2); );
                     
      // background style 6: ivory
      style == 6 ? ( gfx_r=0.86667; gfx_g=0.85490; gfx_b=0.78039;  gfx_rect(xd,yd,xw,yw); );
      
      // background style 7: trooper
      style == 7 ? ( gfx_r=gfx_g=gfx_b=0.0; gfx_a=1;  gfx_rect(xd,yd,xw,yw);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.1; gfx_rect(xd,yd,xw,yw/yd*1.6);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.2; gfx_rect(xd,yd,xw,yw/yd*1.5);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.3; gfx_rect(xd,yd,xw,yw/yd*1.4);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.1; gfx_rect(xd,ya*.76,xw,yw/yd*1.7);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.10; gfx_circle(xa,ya*1.10,r1*0.87,1,1);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.12; gfx_circle(xa,ya*1.15,r1*0.87,1,1);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.14; gfx_circle(xa,ya*1.20,r1*0.87,1,1);
                     gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.15; gfx_circle(xa,ya*1.29,r1*0.87,1,1);
                     gfx_r=0.63922; gfx_g=0.63529; gfx_b=0.61961; gfx_a=1;  gfx_rect(xd,ya*0.91,xw,yw*2); );




      //EXT_FLAGS*****************
      
      // tcp / mcp scaling & summing 
      gfx_ext_flags == 1 ? (
          chan = 0;
          xd = chan*(xw/2);
          yd = 2;
          xw = max(1,floor(gfx_w / 1.4));
          yw = floor(xw / 1.4);
          mode = 1;
          mode === 1 ? xd = floor(xw/4.5);
          r1 = floor(yw * 0.90);
          xa = floor(xd + xw / 2);
          ya = floor(yd + yw * 1.12);
          
          
          // background styles 
          gfx_r=0;gfx_g=1;gfx_b=.9;  gfx_rect(xd*.5,yd,xw*1.2,yw);
          style == 0 ? ( gfx_r=1; gfx_g=1; gfx_b=0.7;  gfx_rect(xd*.5,yd,xw*1.2,yw);  );
          style == 1 ? ( gfx_r=gfx_g=0.18431 ;gfx_b = 0.2;  gfx_rect(xd*0.5,yd,xw*1.2,yw);  );
          style == 2 ? ( gfx_r=0.14110; gfx_g=0.09020; gfx_b=0.21961;  gfx_rect(xd*.5,yd,xw*1.2,yw);  );
          style == 3 ? ( gfx_r=0.65490; gfx_g=0.94902; gfx_b=0.92157;  gfx_rect(xd*.5,yd,xw*1.2,yw);  );
          style == 4 ? ( gfx_r=0.85490; gfx_g=0.85490; gfx_b=0.96078;  gfx_rect(xd*.5,yd,xw*1.2,yw); 
                         gfx_a=0.79; );
          style == 5 ? ( gfx_r=1; gfx_g=0.76471; gfx_b=0.32549; gfx_a=1;  gfx_rect(xd*.5,yd,xw*1.2,yw);
                         gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.10; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.30);
                         gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.13; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.27);
                         gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; gfx_a=.15; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.24);
                         gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.22; gfx_rect(xd*.5,ya*.76,xw*1.2,yw/yd*0.5);
                         gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.10; gfx_circle(xa,ya*1.15,r1*0.87,1,1);
                         gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.13; gfx_circle(xa,ya*1.20,r1*0.87,1,1);
                         gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.15; gfx_circle(xa,ya*1.25,r1*0.87,1,1);
                         gfx_r=1; gfx_g=0.88235; gfx_b=0.53725; gfx_a=.18; gfx_circle(xa,ya*1.30,r1*0.87,1,1);
                         gfx_r=0.10196; gfx_g=0.09804; gfx_b=0.08235; gfx_a=1;  gfx_rect(xd*.5,ya*0.9,xw*1.2,yw*2); );
          style == 6 ? ( gfx_r=0.86667; gfx_g=0.85490; gfx_b=0.78039;  gfx_rect(xd*.5,yd,xw*1.2,yw); );
          style == 7 ? ( gfx_r=gfx_g=gfx_b=0.0; gfx_a=1;  gfx_rect(xd*.5,yd,xw*1.2,yw);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.2; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.30);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.3; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.27);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.4; gfx_rect(xd*.5,yd,xw*1.2,yw/yd*.24);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.1; gfx_rect(xd*.5,ya*.76,xw,yw/yd*.22);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.10; gfx_circle(xa,ya*1.10,r1*0.87,1,1);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.12; gfx_circle(xa,ya*1.15,r1*0.87,1,1);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.14; gfx_circle(xa,ya*1.20,r1*0.87,1,1);
                         gfx_r=0.14902; gfx_g=0.15294; gfx_b=0.16078; gfx_a=.15; gfx_circle(xa,ya*1.29,r1*0.87,1,1);
                         gfx_r=0.63922; gfx_g=0.63529; gfx_b=0.61961; gfx_a=1;  gfx_rect(xd*.5,ya*0.9,xw*1.2,yw*2); );
      );
      
      //EXT_FLAGS END*************




    //*************************************** meter scale styles *****************************************   
    
      // scale  style 0: classic  
      gfx_r=gfx_g=gfx_b= 0;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);   
      
      gfx_r=.95; gfx_g=0; gfx_b=0; // red 
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
    
      // scale style 1: dark knight
      style == 1 ? (
      gfx_r=gfx_g=gfx_b= 1;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);   
      
      gfx_r=0.94902; gfx_g=0.32157; gfx_b=0.72941; // bold line 
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
      
      // scale style 2: purple
      style == 2 ? (
      gfx_r=0.63922; gfx_g=0.45882; gfx_b=1;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);   
        
      gfx_r=0.16863; gfx_g=0.73333; gfx_b=1; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
    
      // scale style 3: mint
      style == 3 ? (
      gfx_r=0.29020; gfx_g=0.85098; gfx_b=0.69020; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
    
      // scale style 4: pastel
      style == 4 ? (
      gfx_r=0.37647; gfx_g=0.55294; gfx_b=0.70980;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);   
    
      gfx_r=0.96078; gfx_g=0.86667; gfx_b=0.60392; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
      
      // scale style 5: warm
      style == 5 ? (
      gfx_r=gfx_g=gfx_b= 0;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);
    
      gfx_r=0.81373; gfx_g=0.08627; gfx_b=0.09412; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
      
      // scale style 6: ivory
      style == 6 ? (
      gfx_r=0.36070; gfx_g=0.34902; gfx_b=0.31373;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);
    
      gfx_r=0.89412; gfx_g=0.29412; gfx_b=0.23922; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );
      
      // scale style 7: trooper
      style == 7 ? (
      gfx_r=0.84706; gfx_g=0.85098; gfx_b=0.85882;
      gfx_arc(xa, ya, r1, -45 * ($pi / 180), w2, 1);
    
      gfx_r=.95; gfx_g=0; gfx_b=0; // bold line
      gfx_arc(xa, ya, r1 + 1, w1, w2, 1);
      gfx_arc(xa, ya, r1 + 2, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 3, w1, w2, 1);  
      gfx_arc(xa, ya, r1 + 4, w1, w2, 1);
      );




    //*************************************** meter font styles ******************************************
    
    
    // -20dB - 0dB *********************
      
      // font style 0: classic
      gfx_setfont(1);  gfx_r=gfx_g=gfx_b= 0.2;
    
      // font style 1: dark knight
      style == 1 ? ( gfx_r=gfx_g=gfx_b= 1;  );
    
      // font style 2: purple
      style == 2 ? ( gfx_r=0.63922; gfx_g=0.45882; gfx_b=1;  );
    
      // font style 4: pastel
      style == 4 ? ( gfx_r=0.37647; gfx_g=0.55294; gfx_b=0.70980;  );
      
      // font style 6: ivory
      style == 6 ? ( gfx_r=0.36070; gfx_g=0.34902; gfx_b=0.31373;  );
      
      // font style 7: trooper
      style == 7 ? ( gfx_r=0.84706; gfx_g=0.85098; gfx_b=0.85882;  );




    // Draw scale notches and values if scaling allows
      
      //EXT_FLAGS*****************
      gsc <=.5 ? (
            jj = 0;
            while ( jj <=10 ) (              
                //ii = print[jj];
                ph =  pos[jj];
                ph = (45 + ph*90) * $pi / 180; 
                cosp = cos(ph) * r1;
                sinp = sin(ph) * r1;
                x1 = xa - cosp ;
                y1 = ya - sinp ;
                x2 = xa - cosp * 1.1;
                y2 = ya - sinp * 1.1;
                gfx_x = x1;
                gfx_y = y1; 
                gfx_lineto(x2, y2);
                jj += 1.8;
            );
      );
      //EXT_FLAGS END*************
             
         
      gsc >.5 ? (
          jj = 0;
          while ( jj <= 10 ) (
              ii = print[jj];
            
              ph =  pos[jj];
              ph = (45 + ph*90) * $pi / 180; 
            
              cosp = cos(ph) * r1;
              sinp = sin(ph) * r1;
            
              x1 = xa - cosp ;
              y1 = ya - sinp ;
              x2 = xa - cosp * 1.1;
              y2 = ya - sinp * 1.1;
              x3 = xa - cosp * 1.15;
              y3 = ya - sinp * 1.11;
              
              gfx_x = x1;
              gfx_y = y1; 
              gfx_lineto(x2, y2);
              
              gfx_x = x3 - 8;   
              gfx_y = y3 - gfx_texth;
              gfx_printf("%3d", ii);
               
              jj += 1;
              jj == 8 ? ( gfx_r = 1; gfx_g = gfx_b = 0 );
              
            

  

            // +1dB - +3dB *********************

              // font style 1: dark knight
              style == 1 ? (jj == 8 ? ( gfx_r=0.94902; gfx_g=0.32157; gfx_b=0.72941; ); );
        
              // font style 2: purple
              style == 2 ? (jj == 8 ? ( gfx_r=0.16863; gfx_g=0.73333; gfx_b=1; ); );
        
              // font style 3: mint
              style == 3 ? (jj == 8 ? ( gfx_r=gfx_g=gfx_b=0; ); );
        
              // font style 4: pastel
              style == 4 ? (jj == 8 ? ( gfx_r=0.37647; gfx_g=0.55294; gfx_b=0.70980; ); );
              
              // font style 5: warm
              style == 5 ? (jj == 8 ? ( gfx_r=0.81373; gfx_g=0.08627; gfx_b=0.09412; ); );
              
              // font style 6: ivory
              style == 6 ? (jj == 8 ? ( gfx_r=0.89412; gfx_g=0.29412; gfx_b=0.23922; ); );
              
              // font style 7: trooper
              style == 7 ? (jj == 8 ? ( gfx_r=0.84706; gfx_g=0.85098; gfx_b=0.85882; ); );
          ); 
      
    
    
    
    
        //**************************************** peak font styles ******************************************
    
          // peak style 0: classic
          style == 0 ? (
            gfx_r=gfx_g=gfx_b = 0.0; // black 
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
            
          // peak style 1: dark knight
          style == 1 ? (
            gfx_r=0.44706; gfx_g= 0.85882; gfx_b= 1;  // pastel light blue
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
          
          // peak style 2: purple
          style == 2 ? (
            gfx_r=0.30980; gfx_g=0.39216; gfx_b=0.83922;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
          
          // peak style 3: mint
          style == 3 ? (
            gfx_r=0.37647; gfx_g=0.65098; gfx_b=0.62745;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
        
          // peak style 4: pastel
          style == 4 ? (
            gfx_r=0.37647; gfx_g=0.55294; gfx_b=0.70980;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
          
          // peak style 5: warm
          style == 5 ? (
            gfx_r=gfx_g=gfx_b=0.0;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );

          // peak style 6: ivory
          style == 6 ? (
            gfx_r=0.40784; gfx_g=0.39608; gfx_b=0.36078;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
          
          // peak style 7: trooper
          style == 7 ? (
            gfx_r=0.84706; gfx_g=0.85098; gfx_b=0.85882;
            gfx_x = xd + xw * .9 - 30; gfx_y = yd + yw * .9 - 10;
            gfx_drawstr("PEAK");
          );
          
          
          
        
        //****************************************** VU font styles ******************************************
          
          gfx_setfont(2); // large
          
          // VU style 0: classic
          style == 0 ? (
            gfx_r=gfx_g=gfx_b = 0.0; 
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
           
          // VU style 1: dark knight
          style == 1 ? (
            gfx_r=0.94902; gfx_g=0.32157; gfx_b=0.72941;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
           
          // VU style 2: purple
          style == 2 ? (
            gfx_r=0.30980; gfx_g=0.39216; gfx_b=0.83922;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
        
          // VU style 3: mint
          style == 3 ? (
            gfx_r=0.37647; gfx_g=0.65098; gfx_b=0.62745;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
        
          // VU style 4: pastel
          style == 4 ? (
            gfx_r=0.37647; gfx_g=0.55294; gfx_b=0.70980;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
          
          // VU style 5: warm
          style == 5 ? (
            gfx_r=gfx_g=gfx_b=0.0;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
          
          // VU style 6: ivory
          style == 6 ? (
            gfx_r=0.40784; gfx_g=0.39608; gfx_b=0.36078;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );
          
          // VU style 7: trooper
          style == 7 ? (
            gfx_r=.95; gfx_g=0; gfx_b=0;
            gfx_x = xa - 10;
            gfx_y = yd + yw * .6;
            gfx_drawstr("VU");
          );

      );




        //******************************************** LED styles ********************************************
        
          // LEDs style 0: classic
          style == 0 ? (
            gfx_r = .95; gfx_g = gfx_b = 0.1; // red 
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
        
          // LEDs style 1: dark knight
          style == 1 ? (
            gfx_r=gfx_g=0.14510; gfx_b=0.15294; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 1 ? (
            gfx_r=0.94902; gfx_g=0.32157; gfx_b=0.72941; // pink 
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
        
          // LEDs style 2: purple
          style == 2 ? (
            gfx_r=0.07843; gfx_g=0.05098; gfx_b=0.12157; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 2 ? (
            gfx_r=0.94118; gfx_g=0.31765; gfx_b=0.98824; // pink 
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
        
          // LEDs style 3: mint
          style == 3 ? (
            gfx_r=0.56078; gfx_g=0.85098; gfx_b=0.81961; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 3 ? (
            gfx_r=0.05098; gfx_g=0.94902; gfx_b=0.01961; // green
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
        
          // LEDs style 4: pastel
          style == 4 ? (
            gfx_r=0.80784; gfx_g=0.80784; gfx_b=0.91373; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 4 ? (
            gfx_r=0.63922; gfx_g=1.00000; gfx_b=0.65098; //green
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
          
          // LEDs style 5: warm
          style == 5 ? (
            gfx_r=0.93725; gfx_g=0.70196; gfx_b=0.26275; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 5 ? (
            gfx_r=1; gfx_g=0.05882; gfx_b=0.10980; gfx_a=1; //red
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
            gfx_r=1; gfx_g=1; gfx_b=0.94532; gfx_a=0.4; //hl
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 4, yd + yw * 0.9 - 4, 1, 1, 1);
            );
            gfx_a=1;
          );
          
          // LEDs style 6: ivory
          style == 6 ? (
            gfx_r=0.81569; gfx_g=0.79608; gfx_b=0.72157; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 6 ? (
            gfx_r=0.89412; gfx_g=0.29412; gfx_b=0.17647; //orange
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );
          
          // LEDs style 7: trooper
          style == 7 ? (
            gfx_r=0.10980; gfx_g=0.10588; gfx_b=0.12549; // off
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          style == 7 ? (
            gfx_r=.95; gfx_g=0; gfx_b=0; //red
            (chan == 0 && overL_g > 0) || (chan == 1 && overR_g > 0)  ? (   
            gfx_circle(xd + xw*0.9 + 6, yd + yw * 0.9 - 4, 4, 1, 1);
            );
          );




    //******************************************* needle styles ******************************************
    
      // draw needle
      chan == 0 ? ph = dbL : ph = dbR;
    
      ph = 45 + (ph+20)/23*90; 
      ph = ph * ($pi / 180);
      
      cosp = cos(ph);
      sinp = sin(ph);
        
      x1 = xa - cosp * r1 * 0.15;
      y1 = ya - sinp * r1 * 0.15;
      x2 = xa - cosp * r1 * 1.1;
      y2 = ya - sinp * r1 * 1.1;
    
    
    
    
      // needle style 0: classic / mint
      gfx_r=gfx_g=gfx_b = 0.0;                   
      gfx_x = x1;
      gfx_y = y1; 
      gfx_lineto(x2, y2);
    
      // needle style style 1: dark knight
      style == 1 ? (
        gfx_r=0.44706; gfx_g= 0.85882; gfx_b= 1;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
    
      // needle style 2: purple
      style == 2 ? (
        gfx_r=0.16863; gfx_g=0.73333; gfx_b=1;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
    
      // needle style 4: pastel
      style == 4 ? (
        gfx_r=0.45490; gfx_g=0.67059; gfx_b=0.85882;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
      
      // needle style 5: warm
      style == 5 ? (
        gfx_r=0.37647; gfx_g=0.19216; gfx_b=0.07059;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
      
      // needle style 6: ivory
      style == 6 ? (
        gfx_r=0.32941; gfx_g=0.31765; gfx_b=0.28235;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
      
      // needle style 7: trooper
      style == 7 ? (
        gfx_r=0.63922; gfx_g=0.63529; gfx_b=0.61961;
        gfx_x = x1;
        gfx_y = y1; 
        gfx_lineto(x2, y2);
      );
    
    
    
    
      // draw thick needle lines and shadows if scaling allows
      gsc >.5 ? (
          gfx_x = x1+1;
          gfx_y = y1;
          gfx_lineto(x2+1, y2);
        
        
          //needle shadow
          gfx_r=gfx_g=gfx_b = 0.6;
      
          // needle shadow style 1: dark knight
          style == 1 ? ( gfx_r=gfx_g=0.07059; gfx_b=0.09412; );
      
          // needle shadow style 2: purple
          style == 2 ? ( gfx_r=0.07843; gfx_g=0.05098; gfx_b=0.12157; );
        
          // needle shadow style 3: mint
          style == 3 ? ( gfx_r=0.29020; gfx_g=0.85098; gfx_b=0.69020; );
          
          // needle shadow style 5: warm
          style == 5 ? ( gfx_r=0.87451; gfx_g=0.49412; gfx_b=0.08235; );
          
          // needle shadow style 6: ivory
          style == 6 ? ( gfx_r=0.64314; gfx_g=0.63137; gfx_b=0.59608; );
          
          // needle shadow style 7: trooper
          style == 7 ? ( gfx_r=0.18824; gfx_g=0.18431; gfx_b=0.20392; );
        
        
          gfx_x = x1+4;
          gfx_y = y1; 
          gfx_lineto(x2+4, y2);
      );
    
    
    
    
    
    //******************************************** needle circle *****************************************
    
      // needle circle style 0: classic
      style == 0 ? (
      gfx_r=0.12; gfx_g=0.24; gfx_b=0.43;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
      
      // needle circle style 1: dark knight
      style == 1 ? (
      gfx_r=gfx_g=gfx_b = 0.07059;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
    
      // needle circle style 2: purple
      style == 2 ? (
      gfx_r=0.06275; gfx_g=0.03922; gfx_b=0.10196;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
    
      // needle circle style 3: mint
      style == 3 ? (
      gfx_r=0.20392; gfx_g=0.34902; gfx_b=0.33725;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
    
      // needle circle style 4: pastel
      style == 4 ? (
      gfx_r=0.96078; gfx_g=0.66275; gfx_b=0.67059;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
      
      // needle circle style 5: warm
      style == 5 ? (
      gfx_r=0.10196; gfx_g=0.09804; gfx_b=0.08235;
      gfx_circle(xa,ya*1.3,r1*0.65,1,1);
      );
      
      // needle circle style 6: ivory
      style == 6 ? (
      gfx_r=0.8; gfx_g=0.78039; gfx_b=0.70588;
      gfx_circle(xa,ya,r1*0.16,1,1);
      );
      
      // needle circle style 7: trooper
      style == 7 ? (
      gfx_r=0.63922; gfx_g=0.63529; gfx_b=0.61961;
      gfx_circle(xa,ya,r1*0.2,1,1);
      );




    //******************************************* channel labels *****************************************
    
      gxx = ((gfx_w/2) - gfx_h*(480/253)/1.553);
    
    
      // channel labeling
      gfx_r=gfx_g=gfx_b = 1;
      gfx_x = xd; gfx_y = yd+yw+4;
      
      gxx >= 1 ? ( gfx_x = x-100; gfx_y = y-100; );
      
      chan == 0 ? 
          gfx_drawstr("LEFT / MID") :
          gfx_drawstr("RIGHT / SIDE") ;
          
          chan += 1;
          
          mode === 1 ? chan += 1;
          
      
  ); // close channel section - see === STYLES ===




//********************************************* bottom bar *******************************************
  
  xw2 = max(1,floor((gfx_w) / 2));
  yw2 = floor(xw / 1.025);
  
  
  gfx_ext_flags == 0 ? (  // show bottom bar only if meter is not embedded
      gsc >.6 ? (
      
          // bottom bar bg
          gfx_r=gfx_g=gfx_b= 0; gfx_a= bb_t ;
          gfx_rect(gfx_x=x,gfx_y=ylo-gfx_texth/1.7,xw2*2.01,gfx_texth+10,yw2);
    
    
          // separator line
          gfx_r=gfx_g=gfx_b = 0.15;
          gfx_line(gfx_x=x,gfx_y=ylo-gfx_texth/1.6,xw2*2.01,ylo-gfx_texth/1.6);
    
    
          // version txt
          gfx_setfont(1); // small
          gfx_r=gfx_g=gfx_b = 1; gfx_a=1;
          gfx_drawstr(version, 1|4,gfx_x+gfx_texth+35,gfx_y+gfx_texth+8); // defined in @init
      
    
          /* // transparency
          gfx_setfont(1); // small
          gfx_r=gfx_g=gfx_b = 1; gfx_a=1;
          
          xn = gfx_x+gfx_texth+yw2;
          yn = gfx_y+gfx_texth+8;
      
          gfx_drawstr(  sprintf(#, "T: %.2f", bb_t) , 1|4, xn/1.15, yn );  */
      );
  );




//======================================= SLIDER MASK ===============================================/

  xu = gfx_texth*3/4;
  yu = gfx_texth*7/8;
    
  want_axis = gfx_h > yu*10 && gfx_w > xu*14;
  want_axis ? xu += gfx_texth*2;
    
  ylo = gfx_h-yu;
    
    
  function set_color(trgb)(
  gfx_set((trgb&$xff0000)/$xff0000,(trgb&$xff00)/$xff00,(trgb&$xff)/$xff);
  );
    
    
  has_click = (mouse_cap&1) && !(last_cap&1) ? 1 : 0;
  last_cap = mouse_cap;
    

  gsc >.6 ? (
      (want_axis || sliders_showing) && !(gfx_ext_flags&1) ? (
          set_color(TEXT_COLOR);
          tx = gfx_w-(gfx_texth+0.5)*3/2;
          gfx_rect(gfx_x=tx-gfx_texth/4,gfx_y=ylo-gfx_texth/2,gfx_texth+1,gfx_texth+1,0);
          gfx_drawstr("☰",1,gfx_x+gfx_texth+1,gfx_y+gfx_texth+1);
          has_click && abs(mouse_x-tx) < gfx_texth/2 && abs(mouse_y-ylo) < gfx_texth/2 ? (
              sliders_showing = slider_show(UI_SLIDER_MASK,-1) > 0;
              has_click=0;
          );
      );
  );  
  

  
  




/****************************************** END OF CODE *********************************************\

